rownames(data) <- c()
global_upper <- max(data$High)
global_lower <- min(data$Low)
library(quantmod)
ticker <- "ISS.CO"
data <- getSymbols(Symbols = ticker, auto.assign = FALSE, src = "yahoo", from = "2019-12-01")
data <- data.frame(data)
data$Date <- as.Date(rownames(data))
names(data) <- c("Open", "High", "Low", "Close", "Volume", "Adjusted", "Date")
rownames(data) <- c()
global_upper <- max(data$High)
global_lower <- min(data$Low)
local_upper <- max(data$High[data$Date >= "2020-03-15"])
local_upper <- min(data$High[data$Date >= "2020-03-15"])
local_upper <- max(data$High[data$Date >= "2020-03-15"])
local_lower <- min(data$High[data$Date >= "2020-03-15"])
local_upper <- max(data$High[data$Date >= "2020-03-15"])
local_upper <- max(data$High[data$Date >= "2020-03-15"])
local_lower <- min(data$High[data$Date >= "2020-03-15"])
local_lower <- min(data$Low[data$Date >= "2020-03-15"])
fib1 <- 0.618
fib2 <- 0.5
fib3 <- 0.382
global_dist <- global_upper - global_lower
global_dist <- global_upper - global_lower
local_dist <- local_upper - local_lower
global_dist <- global_upper - global_lower
local_dist <- local_upper - local_lower
global_line_1 <- global_dist * f3 + global_lower
global_line_2 <- global_dist * f2 + global_lower
f1 <- 0.618
f2 <- 0.5
f3 <- 0.382
global_dist <- global_upper - global_lower
local_dist <- local_upper - local_lower
global_line_1 <- global_dist * f3 + global_lower
global_line_2 <- global_dist * f2 + global_lower
global_line_3 <- global_dist * f1 + global_lower
local_line_1 <- local_dist * f3 + local_lower
local_line_2 <- local_dist * f2 + local_lower
local_line_3 <- local_dist * f1 + local_lower
local_line_3
local_line_2
local_line_1
local_line_1 <- local_dist * f1 + local_lower
local_line_2 <- local_dist * f2 + local_lower
local_line_3 <- local_dist * f3 + local_lower
local_line_1
local_line_2
local_line_3
global_line_1 <- global_dist * f1 + global_lower
global_line_2 <- global_dist * f2 + global_lower
global_line_3 <- global_dist * f3 + global_lower
global_line_1
global_line_2
global_line_3
local_name_1 <- "Support 1"
local_name_1 <- "Support 2"
local_name_1 <- "Support 1"
local_name_2 <- "Support 2"
local_name_3 <- "Support 3"
global_name_1 <- "Resistance 1"
global_name_2 <- "Resistance 2"
global_name_3 <- "Resistance 3"
local_line_1 <- local_dist * f1 + local_lower
local_line_2 <- local_dist * f2 + local_lower
local_line_3 <- local_dist * f3 + local_lower
local_name_1 <- "Support 1"
local_name_2 <- "Support 2"
local_name_3 <- "Support 3"
library(plotly)
x1 <- min(data$Date)
x2 <- max(data$Date)
plot_ly(plot_data, x = ~Date, type = "candlestick",
open = ~Open, close = ~Close,
high = ~High, low = ~Low, name = "candlestick") %>%
add_segments(x = x1, xend = x2, y = global_line_1, yend = global_line_1, name = global_name_1) %>%
add_segments(x = x1, xend = x2, y = global_line_2, yend = global_line_2, name = global_name_2) %>%
add_segments(x = x1, xend = x2, y = global_line_3, yend = global_line_3, name = global_name_3) %>%
add_segments(x = x1, xend = x2, y = local_line_1, yend = local_line_1, name = local_name_1) %>%
add_segments(x = x1, xend = x2, y = local_line_2, yend = local_line_2, name = local_name_2) %>%
add_segments(x = x1, xend = x2, y = local_line_3, yend = local_line_2, name = local_name_3) %>%
layout(title = "Ørsted",
yaxis = list(title = "Stock price"),
xaxis = list(rangeslider = list(visible = F)))
plot_ly(data, x = ~Date, type = "candlestick",
open = ~Open, close = ~Close,
high = ~High, low = ~Low, name = "candlestick") %>%
add_segments(x = x1, xend = x2, y = global_line_1, yend = global_line_1, name = global_name_1) %>%
add_segments(x = x1, xend = x2, y = global_line_2, yend = global_line_2, name = global_name_2) %>%
add_segments(x = x1, xend = x2, y = global_line_3, yend = global_line_3, name = global_name_3) %>%
add_segments(x = x1, xend = x2, y = local_line_1, yend = local_line_1, name = local_name_1) %>%
add_segments(x = x1, xend = x2, y = local_line_2, yend = local_line_2, name = local_name_2) %>%
add_segments(x = x1, xend = x2, y = local_line_3, yend = local_line_2, name = local_name_3) %>%
layout(title = "Ørsted",
yaxis = list(title = "Stock price"),
xaxis = list(rangeslider = list(visible = F)))
plot_ly(data, x = ~Date, type = "candlestick",
open = ~Open, close = ~Close,
high = ~High, low = ~Low, name = "candlestick") %>%
add_segments(x = x1, xend = x2, y = global_line_1, yend = global_line_1, name = global_name_1, inherit = FALSE) %>%
add_segments(x = x1, xend = x2, y = global_line_2, yend = global_line_2, name = global_name_2, inherit = FALSE) %>%
add_segments(x = x1, xend = x2, y = global_line_3, yend = global_line_3, name = global_name_3, inherit = FALSE) %>%
add_segments(x = x1, xend = x2, y = local_line_1, yend = local_line_1, name = local_name_1, inherit = FALSE) %>%
add_segments(x = x1, xend = x2, y = local_line_2, yend = local_line_2, name = local_name_2, inherit = FALSE) %>%
add_segments(x = x1, xend = x2, y = local_line_3, yend = local_line_2, name = local_name_3, inherit = FALSE) %>%
layout(title = "Ørsted",
yaxis = list(title = "Stock price"),
xaxis = list(rangeslider = list(visible = F)))
plot_ly(data, x = ~Date, type = "candlestick",
open = ~Open, close = ~Close,
high = ~High, low = ~Low, name = "candlestick") %>%
add_segments(x = x1, xend = x2, y = global_line_1, yend = global_line_1, name = global_name_1, inherit = FALSE) %>%
add_segments(x = x1, xend = x2, y = global_line_2, yend = global_line_2, name = global_name_2, inherit = FALSE) %>%
add_segments(x = x1, xend = x2, y = global_line_3, yend = global_line_3, name = global_name_3, inherit = FALSE) %>%
add_segments(x = x1, xend = x2, y = local_line_1, yend = local_line_1, name = local_name_1, inherit = FALSE) %>%
add_segments(x = x1, xend = x2, y = local_line_2, yend = local_line_2, name = local_name_2, inherit = FALSE) %>%
add_segments(x = x1, xend = x2, y = local_line_3, yend = local_line_3, name = local_name_3, inherit = FALSE) %>%
layout(title = "Ørsted",
yaxis = list(title = "Stock price"),
xaxis = list(rangeslider = list(visible = F)))
global_line_1 <- round(global_dist * f1 + global_lower, 2)
global_line_2 <- round(global_dist * f2 + global_lower, 2)
global_line_3 <- round(global_dist * f3 + global_lower, 2)
global_name_1 <- "Resistance 1"
global_name_2 <- "Resistance 2"
global_name_3 <- "Resistance 3"
local_line_1 <- round(local_dist * f1 + local_lower, 2)
local_line_2 <- round(local_dist * f2 + local_lower, 2)
local_line_3 <- round(local_dist * f3 + local_lower, 2)
plot_ly(data, x = ~Date, type = "candlestick",
open = ~Open, close = ~Close,
high = ~High, low = ~Low, name = "candlestick") %>%
add_segments(x = x1, xend = x2, y = global_line_1, yend = global_line_1, name = global_name_1, inherit = FALSE) %>%
add_segments(x = x1, xend = x2, y = global_line_2, yend = global_line_2, name = global_name_2, inherit = FALSE) %>%
add_segments(x = x1, xend = x2, y = global_line_3, yend = global_line_3, name = global_name_3, inherit = FALSE) %>%
add_segments(x = x1, xend = x2, y = local_line_1, yend = local_line_1, name = local_name_1, inherit = FALSE) %>%
add_segments(x = x1, xend = x2, y = local_line_2, yend = local_line_2, name = local_name_2, inherit = FALSE) %>%
add_segments(x = x1, xend = x2, y = local_line_3, yend = local_line_3, name = local_name_3, inherit = FALSE) %>%
layout(title = "Ørsted",
yaxis = list(title = "Stock price"),
xaxis = list(rangeslider = list(visible = F)))
plot_ly(data, x = ~Date, type = "candlestick",
open = ~Open, close = ~Close,
high = ~High, low = ~Low, name = "candlestick") %>%
add_segments(x = x1, xend = x2, y = global_line_1, yend = global_line_1, name = global_name_1, inherit = FALSE) %>%
add_segments(x = x1, xend = x2, y = global_line_2, yend = global_line_2, name = global_name_2, inherit = FALSE) %>%
add_segments(x = x1, xend = x2, y = global_line_3, yend = global_line_3, name = global_name_3, inherit = FALSE) %>%
add_segments(x = x1, xend = x2, y = local_line_1, yend = local_line_1, name = local_name_1, inherit = FALSE) %>%
add_segments(x = x1, xend = x2, y = local_line_2, yend = local_line_2, name = local_name_2, inherit = FALSE) %>%
add_segments(x = x1, xend = x2, y = local_line_3, yend = local_line_3, name = local_name_3, inherit = FALSE) %>%
layout(title = ticker,
yaxis = list(title = "Stock price"),
xaxis = list(rangeslider = list(visible = F)))
#ticker <- "ISS.CO"
ticker <- "ORSTED.CO"
library(quantmod)
#ticker <- "ISS.CO"
ticker <- "ORSTED.CO"
data <- getSymbols(Symbols = ticker, auto.assign = FALSE, src = "yahoo", from = "2019-12-01")
data <- data.frame(data)
data$Date <- as.Date(rownames(data))
names(data) <- c("Open", "High", "Low", "Close", "Volume", "Adjusted", "Date")
rownames(data) <- c()
global_upper <- max(data$High)
global_lower <- min(data$Low)
local_upper <- max(data$High[data$Date >= "2020-03-15"])
local_lower <- min(data$Low[data$Date >= "2020-03-15"])
f1 <- 0.618
f2 <- 0.5
f3 <- 0.382
global_dist <- global_upper - global_lower
local_dist <- local_upper - local_lower
global_line_1 <- round(global_dist * f1 + global_lower, 2)
global_line_2 <- round(global_dist * f2 + global_lower, 2)
global_line_3 <- round(global_dist * f3 + global_lower, 2)
global_name_1 <- "Resistance 1"
global_name_2 <- "Resistance 2"
global_name_3 <- "Resistance 3"
local_line_1 <- round(local_dist * f1 + local_lower, 2)
local_line_2 <- round(local_dist * f2 + local_lower, 2)
local_line_3 <- round(local_dist * f3 + local_lower, 2)
local_name_1 <- "Support 1"
local_name_2 <- "Support 2"
local_name_3 <- "Support 3"
x1 <- min(data$Date)
x2 <- max(data$Date)
plot_ly(data, x = ~Date, type = "candlestick",
open = ~Open, close = ~Close,
high = ~High, low = ~Low, name = "candlestick") %>%
add_segments(x = x1, xend = x2, y = global_line_1, yend = global_line_1, name = global_name_1, inherit = FALSE) %>%
add_segments(x = x1, xend = x2, y = global_line_2, yend = global_line_2, name = global_name_2, inherit = FALSE) %>%
add_segments(x = x1, xend = x2, y = global_line_3, yend = global_line_3, name = global_name_3, inherit = FALSE) %>%
add_segments(x = x1, xend = x2, y = local_line_1, yend = local_line_1, name = local_name_1, inherit = FALSE) %>%
add_segments(x = x1, xend = x2, y = local_line_2, yend = local_line_2, name = local_name_2, inherit = FALSE) %>%
add_segments(x = x1, xend = x2, y = local_line_3, yend = local_line_3, name = local_name_3, inherit = FALSE) %>%
layout(title = ticker,
yaxis = list(title = "Stock price"),
xaxis = list(rangeslider = list(visible = F)))
library(quantmod)
#ticker <- "ISS.CO"
ticker <- "ORSTED.CO"
#start_date <- "2019-12-01"
start_date <- "2019-08-01"
data <- getSymbols(Symbols = ticker, auto.assign = FALSE, src = "yahoo", from = start_date)
data <- data.frame(data)
data$Date <- as.Date(rownames(data))
names(data) <- c("Open", "High", "Low", "Close", "Volume", "Adjusted", "Date")
rownames(data) <- c()
global_upper <- max(data$High)
global_lower <- min(data$Low)
local_upper <- max(data$High[data$Date >= "2020-03-15"])
local_lower <- min(data$Low[data$Date >= "2020-03-15"])
f1 <- 0.618
f2 <- 0.5
f3 <- 0.382
global_dist <- global_upper - global_lower
local_dist <- local_upper - local_lower
global_line_1 <- round(global_dist * f1 + global_lower, 2)
global_line_2 <- round(global_dist * f2 + global_lower, 2)
global_line_3 <- round(global_dist * f3 + global_lower, 2)
global_name_1 <- "Resistance 1"
global_name_2 <- "Resistance 2"
global_name_3 <- "Resistance 3"
local_line_1 <- round(local_dist * f1 + local_lower, 2)
local_line_2 <- round(local_dist * f2 + local_lower, 2)
local_line_3 <- round(local_dist * f3 + local_lower, 2)
local_name_1 <- "Support 1"
local_name_2 <- "Support 2"
local_name_3 <- "Support 3"
x1 <- min(data$Date)
x2 <- max(data$Date)
plot_ly(data, x = ~Date, type = "candlestick",
open = ~Open, close = ~Close,
high = ~High, low = ~Low, name = "candlestick") %>%
add_segments(x = x1, xend = x2, y = global_line_1, yend = global_line_1, name = global_name_1, inherit = FALSE) %>%
add_segments(x = x1, xend = x2, y = global_line_2, yend = global_line_2, name = global_name_2, inherit = FALSE) %>%
add_segments(x = x1, xend = x2, y = global_line_3, yend = global_line_3, name = global_name_3, inherit = FALSE) %>%
add_segments(x = x1, xend = x2, y = local_line_1, yend = local_line_1, name = local_name_1, inherit = FALSE) %>%
add_segments(x = x1, xend = x2, y = local_line_2, yend = local_line_2, name = local_name_2, inherit = FALSE) %>%
add_segments(x = x1, xend = x2, y = local_line_3, yend = local_line_3, name = local_name_3, inherit = FALSE) %>%
layout(title = ticker,
yaxis = list(title = "Stock price"),
xaxis = list(rangeslider = list(visible = F)))
library(quantmod)
#ticker <- "ISS.CO"
ticker <- "ORSTED.CO"
#start_date <- "2019-12-01"
start_date <- "2019-01-01"
data <- getSymbols(Symbols = ticker, auto.assign = FALSE, src = "yahoo", from = start_date)
data <- data.frame(data)
data$Date <- as.Date(rownames(data))
names(data) <- c("Open", "High", "Low", "Close", "Volume", "Adjusted", "Date")
rownames(data) <- c()
global_upper <- max(data$High)
global_lower <- min(data$Low)
local_upper <- max(data$High[data$Date >= "2020-03-15"])
local_lower <- min(data$Low[data$Date >= "2020-03-15"])
f1 <- 0.618
f2 <- 0.5
f3 <- 0.382
global_dist <- global_upper - global_lower
local_dist <- local_upper - local_lower
global_line_1 <- round(global_dist * f1 + global_lower, 2)
global_line_2 <- round(global_dist * f2 + global_lower, 2)
global_line_3 <- round(global_dist * f3 + global_lower, 2)
global_name_1 <- "Resistance 1"
global_name_2 <- "Resistance 2"
global_name_3 <- "Resistance 3"
local_line_1 <- round(local_dist * f1 + local_lower, 2)
local_line_2 <- round(local_dist * f2 + local_lower, 2)
local_line_3 <- round(local_dist * f3 + local_lower, 2)
local_name_1 <- "Support 1"
local_name_2 <- "Support 2"
local_name_3 <- "Support 3"
x1 <- min(data$Date)
x2 <- max(data$Date)
plot_ly(data, x = ~Date, type = "candlestick",
open = ~Open, close = ~Close,
high = ~High, low = ~Low, name = "candlestick") %>%
add_segments(x = x1, xend = x2, y = global_line_1, yend = global_line_1, name = global_name_1, inherit = FALSE) %>%
add_segments(x = x1, xend = x2, y = global_line_2, yend = global_line_2, name = global_name_2, inherit = FALSE) %>%
add_segments(x = x1, xend = x2, y = global_line_3, yend = global_line_3, name = global_name_3, inherit = FALSE) %>%
add_segments(x = x1, xend = x2, y = local_line_1, yend = local_line_1, name = local_name_1, inherit = FALSE) %>%
add_segments(x = x1, xend = x2, y = local_line_2, yend = local_line_2, name = local_name_2, inherit = FALSE) %>%
add_segments(x = x1, xend = x2, y = local_line_3, yend = local_line_3, name = local_name_3, inherit = FALSE) %>%
layout(title = ticker,
yaxis = list(title = "Stock price"),
xaxis = list(rangeslider = list(visible = F)))
global_upper <- max(data$High)
global_lower <- min(data$Low)
global_upper
global_lower
local_upper
local_lower
f1 <- 0.618
f2 <- 0.5
f3 <- 0.382
global_dist <- global_upper - global_lower
local_dist <- local_upper - local_lower
global_line_1
global_line_1 <- round(global_dist * f3 + global_lower, 2)
global_line_1
global_dist
global_upper <- max(data$High)[data$Date >= "2019-10-29" & data$Date <= "2020-03-05"]
data$Date >= "2019-10-29"
data$Date >= "2019-10-29" & data$Date <= "2020-03-05"
global_upper <- max(data$High[data$Date >= "2019-10-29" & data$Date <= "2020-03-05"])
global_lower <- min(data$High[data$Date >= "2019-10-29" & data$Date <= "2020-03-05"])
global_lower
global_lower <- min(data$Low[data$Date >= "2019-10-29" & data$Date <= "2020-03-05"])
global_lower
local_upper <- max(data$High[data$Date >= "2020-03-15"])
local_lower <- min(data$Low[data$Date >= "2020-03-15"])
f1 <- 0.618
f2 <- 0.5
f3 <- 0.382
global_dist <- global_upper - global_lower
local_dist <- local_upper - local_lower
global_line_1 <- round(global_dist * f3 + global_lower, 2)
global_line_2 <- round(global_dist * f2 + global_lower, 2)
global_line_3 <- round(global_dist * f3 + global_lower, 2)
global_name_1 <- "Resistance 1"
global_name_2 <- "Resistance 2"
global_name_3 <- "Resistance 3"
local_line_1 <- round(local_dist * f1 + local_lower, 2)
local_line_2 <- round(local_dist * f2 + local_lower, 2)
local_line_3 <- round(local_dist * f3 + local_lower, 2)
local_name_1 <- "Support 1"
local_name_2 <- "Support 2"
local_name_3 <- "Support 3"
x1 <- min(data$Date)
x2 <- max(data$Date)
plot_ly(data, x = ~Date, type = "candlestick",
open = ~Open, close = ~Close,
high = ~High, low = ~Low, name = "candlestick") %>%
add_segments(x = x1, xend = x2, y = global_line_1, yend = global_line_1, name = global_name_1, inherit = FALSE) %>%
add_segments(x = x1, xend = x2, y = global_line_2, yend = global_line_2, name = global_name_2, inherit = FALSE) %>%
add_segments(x = x1, xend = x2, y = global_line_3, yend = global_line_3, name = global_name_3, inherit = FALSE) %>%
add_segments(x = x1, xend = x2, y = local_line_1, yend = local_line_1, name = local_name_1, inherit = FALSE) %>%
add_segments(x = x1, xend = x2, y = local_line_2, yend = local_line_2, name = local_name_2, inherit = FALSE) %>%
add_segments(x = x1, xend = x2, y = local_line_3, yend = local_line_3, name = local_name_3, inherit = FALSE) %>%
layout(title = ticker,
yaxis = list(title = "Stock price"),
xaxis = list(rangeslider = list(visible = F)))
global_upper <- max(data$High[data$Date >= "2019-10-29" & data$Date <= "2020-03-05"])
global_lower <- min(data$Low[data$Date >= "2019-10-29" & data$Date <= "2020-03-05"])
local_upper <- max(data$High[data$Date >= "2020-03-15"])
local_lower <- min(data$Low[data$Date >= "2020-03-15"])
f1 <- 0.618
f2 <- 0.5
f3 <- 0.382
global_dist <- global_upper - global_lower
local_dist <- local_upper - local_lower
global_line_1 <- round(global_dist * f1 + global_lower, 2)
global_line_2 <- round(global_dist * f2 + global_lower, 2)
global_line_3 <- round(global_dist * f3 + global_lower, 2)
global_name_1 <- "Resistance 1"
global_name_2 <- "Resistance 2"
global_name_3 <- "Resistance 3"
local_line_1 <- round(local_dist * f1 + local_lower, 2)
local_line_2 <- round(local_dist * f2 + local_lower, 2)
local_line_3 <- round(local_dist * f3 + local_lower, 2)
local_name_1 <- "Support 1"
local_name_2 <- "Support 2"
local_name_3 <- "Support 3"
x1 <- min(data$Date)
x2 <- max(data$Date)
plot_ly(data, x = ~Date, type = "candlestick",
open = ~Open, close = ~Close,
high = ~High, low = ~Low, name = "candlestick") %>%
add_segments(x = x1, xend = x2, y = global_line_1, yend = global_line_1, name = global_name_1, inherit = FALSE) %>%
add_segments(x = x1, xend = x2, y = global_line_2, yend = global_line_2, name = global_name_2, inherit = FALSE) %>%
add_segments(x = x1, xend = x2, y = global_line_3, yend = global_line_3, name = global_name_3, inherit = FALSE) %>%
add_segments(x = x1, xend = x2, y = local_line_1, yend = local_line_1, name = local_name_1, inherit = FALSE) %>%
add_segments(x = x1, xend = x2, y = local_line_2, yend = local_line_2, name = local_name_2, inherit = FALSE) %>%
add_segments(x = x1, xend = x2, y = local_line_3, yend = local_line_3, name = local_name_3, inherit = FALSE) %>%
layout(title = ticker,
yaxis = list(title = "Stock price"),
xaxis = list(rangeslider = list(visible = F)))
######################################
## Risk ratio app
######################################
source("packages.R")
source("ui.R")
source("server.R")
shinyApp(ui, server)
######################################
## Risk ratio app
######################################
#setwd("C:/Users/Kristian/Aktier/Risk-Ratio")
source("packages.R")
source("ui.R")
source("server.R")
shinyApp(ui, server)
setwd("C:/Users/Kristian/Aktier/Risk-Ratio")
source("packages.R")
source("ui.R")
source("server.R")
shinyApp(ui, server)
setwd("C:/Users/Kristian/Aktier/Risk-Ratio")
library(rsconnect)
setwd("C:/Users/Kristian/Aktier/Risk-Ratio")
deployApp()
######################################
## Risk ratio app
######################################
#setwd("C:/Users/Kristian/Aktier/Risk-Ratio")
source("packages.R")
source("ui.R")
source("server.R")
shinyApp(ui, server)
######################################
## Risk ratio app
######################################
#setwd("C:/Users/Kristian/Aktier/Risk-Ratio")
source("packages.R")
source("ui.R")
source("server.R")
shinyApp(ui, server)
######################################
## Risk ratio app
######################################
#setwd("C:/Users/Kristian/Aktier/Risk-Ratio")
source("packages.R")
source("ui.R")
source("server.R")
shinyApp(ui, server)
######################################
## Risk ratio app
######################################
#setwd("C:/Users/Kristian/Aktier/Risk-Ratio")
source("packages.R")
source("ui.R")
source("server.R")
shinyApp(ui, server)
library(rsconnect)
setwd("C:/Users/Kristian/Aktier/Risk-Ratio")
deployApp()
library(rsconnect)
setwd("C:/Users/Kristian/Aktier/Risk-Ratio")
deployApp()
library(rsconnect)
setwd("C:/Users/Kristian/Aktier/Risk-Ratio")
deployApp()
######################################
## Risk ratio app
######################################
setwd("C:/Users/Kristian/Aktier/Risk-Ratio")
source("packages.R")
source("ui/ui.R")
source("server/server.R")
shinyApp(ui, server)
source("/functions/functions.R")
source("/functions/functions.R")
setwd("C:/Users/Kristian/Aktier/Risk-Ratio")
getwd()
source("/functions/functions.R")
dir.exists(getwd())
dir.exists(paste0(getwd(), "/functions"))
file.exists(paste0(getwd(), "/functions/functions.R"))
source("functions/functions.R")
######################################
## Risk ratio app
######################################
setwd("C:/Users/Kristian/Aktier/Risk-Ratio")
source("packages.R")
source("ui/ui.R")
source("server/server.R")
shinyApp(ui, server)
######################################
## Risk ratio app
######################################
setwd("C:/Users/Kristian/Aktier/Risk-Ratio")
source("/functions/packages.R")
source("/ui/ui.R")
source("/server/server.R")
shinyApp(ui, server)
######################################
## Risk ratio app
######################################
setwd("C:/Users/Kristian/Aktier/Risk-Ratio")
source("functions/packages.R")
source("ui/ui.R")
source("server/server.R")
shinyApp(ui, server)
setwd("C:/Users/Kristian/Aktier/Risk-Ratio")
source("functions/packages.R")
source("ui/ui.R")
######################################
## Risk ratio app
######################################
setwd("C:/Users/Kristian/Aktier/Risk-Ratio")
source("functions/packages.R")
source("ui/ui.R")
source("server/server.R")
shinyApp(ui, server)
setwd("C:/Users/Kristian/Aktier/Risk-Ratio")
source("functions/packages.R")
source("ui/ui.R")
df_invest <- readRDS("data/investments and types.Rda")
######################################
## Risk ratio app
######################################
setwd("C:/Users/Kristian/Aktier/Risk-Ratio")
source("functions/packages.R")
source("ui/ui.R")
source("server/server.R")
shinyApp(ui, server)
library(rsconnect)
setwd("C:/Users/Kristian/Aktier/Risk-Ratio")
deployApp()
