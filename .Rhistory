######################################
setwd("./")
source("functions/packages.R")
source("ui/ui.R")
source("server/server.R")
shinyApp(ui, server)
######################################
## Risk ratio app
######################################
setwd("./")
source("functions/packages.R")
source("ui/ui.R")
source("server/server.R")
#options(shiny.port = "1234")
runApp()
#shinyApp(ui, server)
options(shiny.port = 1234)
runApp()
######################################
## Risk ratio app
######################################
setwd("./")
source("functions/packages.R")
source("ui/ui.R")
source("server/server.R")
options(shiny.port = "1234")
runApp()
#shinyApp(ui, server)
######################################
## Risk ratio app
######################################
setwd("./")
source("functions/packages.R")
source("ui/ui.R")
source("server/server.R")
options(shiny.port = "davs")
runApp()
#shinyApp(ui, server)
options(shiny.port = davs)
######################################
## Risk ratio app
######################################
setwd("./")
source("functions/packages.R")
source("ui/ui.R")
source("server/server.R")
options(shiny.port = 1234)
runApp()
#shinyApp(ui, server)
######################################
## Risk ratio app
######################################
setwd("./")
source("functions/packages.R")
source("ui/ui.R")
source("server/server.R")
options(shiny.port = 1234)
runApp()
#shinyApp(ui, server)
######################################
## Risk ratio app
######################################
setwd("./")
source("functions/packages.R")
source("ui/ui.R")
source("server/server.R")
options(shiny.port = 1234)
#shinyApp(ui, server)
runApp()
runApp()
######################################
## Risk ratio app
######################################
setwd("./")
source("functions/packages.R")
source("ui/ui.R")
source("server/server.R")
options(shiny.port = 1234)
runApp()
#shinyApp(ui, server)
######################################
## Risk ratio app
######################################
setwd("./")
source("functions/packages.R")
source("ui/ui.R")
source("server/server.R")
#options(shiny.port = 1234)
runApp()
#shinyApp(ui, server)
runApp("app.R")
######################################
## Risk ratio app
######################################
setwd("./")
source("functions/packages.R")
source("ui/ui.R")
source("server/server.R")
#options(shiny.port = 1234)
runApp("app.R")
#shinyApp(ui, server)
runApp(shinyApp(ui, server))
options(shiny.port = 1235)
runApp(shinyApp(ui, server))
options(shiny.port = "davs")
runApp(shinyApp(ui, server))
######################################
## Risk ratio app
######################################
setwd("./")
source("functions/packages.R")
source("ui/ui.R")
source("server/server.R")
#options(shiny.port = "davs")
runApp(shinyApp(ui, server), host = getOption("shiny.host", "127.0.0.1"))
#shinyApp(ui, server)
######################################
## Risk ratio app
######################################
setwd("./")
source("functions/packages.R")
source("ui/ui.R")
source("server/server.R")
options(shiny.port = 1234)
runApp(shinyApp(ui, server), host = getOption("shiny.host", "127.0.0.1"))
#shinyApp(ui, server)
######################################
## Risk ratio app
######################################
setwd("./")
source("functions/packages.R")
source("ui/ui.R")
source("server/server.R")
#options(shiny.port = 1234)
runApp(shinyApp(ui, server), host = getOption("shiny.host", "127.0.0.1"))
#shinyApp(ui, server)
setwd("./")
source("functions/packages.R")
source("ui/ui.R")
source("server/server.R")
#options(shiny.host = "ddaaaa")
#c_promt <- system("ipconfig", intern = TRUE)
#address <- grepl("IPv4-adresse", c_promt)
#IPv4_address <- gsub(".*: ", "", c_promt[address])
options(shiny.host = "127.0.0.0")
options(shiny.port = 1234)
runApp(shinyApp(ui, server))
#options(shiny.host = "ddaaaa")
#c_promt <- system("ipconfig", intern = TRUE)
#address <- grepl("IPv4-adresse", c_promt)
#IPv4_address <- gsub(".*: ", "", c_promt[address])
options(shiny.host = "127.0.0.1")
options(shiny.port = 1234)
runApp(shinyApp(ui, server))
options(shiny.port = 6000)
runApp(shinyApp(ui, server))
p_randomInt(3000, 8000)
options(shiny.port = 9876)
runApp(shinyApp(ui, server))
#options(shiny.host = "ddaaaa")
#c_promt <- system("ipconfig", intern = TRUE)
#address <- grepl("IPv4-adresse", c_promt)
#IPv4_address <- gsub(".*: ", "", c_promt[address])
options(shiny.host = "127.5.0.1")
options(shiny.port = 9876)
runApp(shinyApp(ui, server))
#options(shiny.host = "ddaaaa")
#c_promt <- system("ipconfig", intern = TRUE)
#address <- grepl("IPv4-adresse", c_promt)
#IPv4_address <- gsub(".*: ", "", c_promt[address])
options(shiny.host = "127.a.0.1")
options(shiny.port = 9876)
runApp(shinyApp(ui, server))
#options(shiny.host = "ddaaaa")
#c_promt <- system("ipconfig", intern = TRUE)
#address <- grepl("IPv4-adresse", c_promt)
#IPv4_address <- gsub(".*: ", "", c_promt[address])
options(shiny.host = "127.9.0.1")
options(shiny.port = 9876)
runApp(shinyApp(ui, server))
options(shiny.port = 98769)
runApp(shinyApp(ui, server))
options(shiny.port = 9876)
runApp(shinyApp(ui, server))
options(shiny.port = "mmmm")
runApp(shinyApp(ui, server))
######################################
## Risk ratio app
######################################
setwd("./")
source("functions/packages.R")
source("ui/ui.R")
source("server/server.R")
shinyApp(ui, server)
######################################
## Risk ratio app
######################################
setwd("./")
source("functions/packages.R")
source("ui/ui.R")
source("server/server.R")
shinyApp(ui, server)
######################################
## Risk ratio app
######################################
setwd("./")
source("functions/packages.R")
source("ui/ui.R")
source("server/server.R")
shinyApp(ui, server)
system("ipconfig", intern = TRUE)
addresse <- system("ipconfig", intern = TRUE)
grepl("IPv4-adresse", addresse)
addresse[grepl("IPv4-adresse", addresse)]
gsub(":.*", "", addresse[grepl("IPv4-adresse", addresse)])
gsub(".*:", "", addresse[grepl("IPv4-adresse", addresse)])
gsub(".* :", "", addresse[grepl("IPv4-adresse", addresse)])
gsub(".*: ", "", addresse[grepl("IPv4-adresse", addresse)])
h <- gsub(".*: ", "", addresse[grepl("IPv4-adresse", addresse)])
options(shiny.host = h)
shinyApp(ui, server)
######################################
## Risk ratio app
######################################
setwd("./")
source("functions/packages.R")
source("ui/ui.R")
source("server/server.R")
addresse <- system("ipconfig", intern = TRUE)
h <- gsub(".*: ", "", addresse[grepl("IPv4-adresse", addresse)])
options(shiny.host = h)
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
titlePanel("Old Faithful Geyser Data"),
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30)
),
mainPanel(
plotOutput("distPlot")
)
)
)
server <- function(input, output, session) {
# Here you read the URL parameter from session$clientData$url_search
observe({
query <- parseQueryString(session$clientData$url_search)
if (!is.null(query[['bins']])) {
updateSliderInput(session, "bins", value = query[['bins']])
}
})
output$distPlot <- renderPlot({
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
titlePanel("Old Faithful Geyser Data"),
helpText("Note: while the data view will show only",
"the specified number of observations, the",
"summary will be based on the full dataset."),
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30)
),
mainPanel(
plotOutput("distPlot")
)
)
)
server <- function(input, output, session) {
# Here you read the URL parameter from session$clientData$url_search
observe({
query <- parseQueryString(session$clientData$url_search)
if (!is.null(query[['bins']])) {
updateSliderInput(session, "bins", value = query[['bins']])
}
})
output$distPlot <- renderPlot({
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
}
# Run the application
shinyApp(ui = ui, server = server)
######################################
## Risk ratio app
######################################
setwd("./")
source("functions/packages.R")
source("ui/ui.R")
source("server/server.R")
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
titlePanel("Old Faithful Geyser Data"),
actionButton("goButton", "", icon = icon("play-circle")),
helpText("Note: while the data view will show only",
"the specified number of observations, the",
"summary will be based on the full dataset."),
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30)
),
mainPanel(
plotOutput("distPlot")
)
)
)
server <- function(input, output, session) {
# Here you read the URL parameter from session$clientData$url_search
observe({
query <- parseQueryString(session$clientData$url_search)
if (!is.null(query[['bins']])) {
updateSliderInput(session, "bins", value = query[['bins']])
}
})
output$distPlot <- renderPlot({
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
titlePanel("Old Faithful Geyser Data"),
actionButton("goButton", "", icon = icon("far fa-meh")),
helpText("Note: while the data view will show only",
"the specified number of observations, the",
"summary will be based on the full dataset."),
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30)
),
mainPanel(
plotOutput("distPlot")
)
)
)
server <- function(input, output, session) {
# Here you read the URL parameter from session$clientData$url_search
observe({
query <- parseQueryString(session$clientData$url_search)
if (!is.null(query[['bins']])) {
updateSliderInput(session, "bins", value = query[['bins']])
}
})
output$distPlot <- renderPlot({
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
}
# Run the application
shinyApp(ui = ui, server = server)
shinyApp(
ui = shinyUI(
fluidPage(
fluidRow(
actionButton("goButton", "", icon = icon("play-circle")),
tags$button(
id = "reset_button",
class="btn action-button",
icon("close")
),
tags$button(
id = "web_button",
class = "btn action-button",
tags$img(src = "http://images.all-free-download.com/images/graphicthumb/button_play_89677.jpg",
height = "50px")
)
),
fluidRow(
textOutput("text")
)
)
),
server = function(input, output, session){
out <- reactiveVal("Nothing")
observeEvent(input$goButton,{
out("Go Pushed")
})
observeEvent(input$reset_button,{
out("Resetted")
})
observeEvent(input$web_button,{
out("From the web")
})
output$text <- renderText({out()})
}
)
require(shiny)
require(shinyjs)
ui <- fluidPage(
img(id="my_img",src="image.png",style="cursor:pointer;"),
useShinyjs(),
tabsetPanel(id="navbar",
tabPanel("tab1", p("This is tab 1")),
tabPanel("tab2", p("This is tab 2"))
)
)
server <- function(input, output,session){
shinyjs::onclick("my_img",  updateTabsetPanel(session, inputId="navbar", selected="tab2"))
}
shinyApp(ui,server)
require(shiny)
require(shinyjs)
ui <- fluidPage(
img(id="my_img",src="image.png",style="cursor:pointer;"),
useShinyjs(),
tabsetPanel(id="navbar",
tabPanel("tab1", p("This is tab 1")),
tabPanel("tab2", p("This is tab 2"))
)
)
server <- function(input, output,session){
shinyjs::onclick("my_img",  print("davs"))
}
shinyApp(ui,server)
require(shiny)
require(shinyjs)
ui <- fluidPage(
img(id="my_img",src="image.png",style="cursor:pointer;"),
useShinyjs()
)
server <- function(input, output,session){
shinyjs::onclick("my_img",  print("davs"))
}
shinyApp(ui,server)
require(shiny)
require(shinyjs)
ui <- fluidPage(
img(id="my_img",src="image.png",style="cursor:pointer;")
)
server <- function(input, output,session){
shinyjs::onclick("my_img",  print("davs"))
}
shinyApp(ui,server)
require(shiny)
require(shinyjs)
ui <- fluidPage(
img(id="my_img",src="image.png",style="cursor:pointer;"),
useShinyjs()
)
server <- function(input, output,session){
shinyjs::onclick("my_img",  print("davs"))
}
shinyApp(ui,server)
require(shiny)
require(shinyjs)
ui <- fluidPage(
useShinyjs(),
img(id="my_img",src="image.png",style="cursor:pointer;")
)
server <- function(input, output,session){
shinyjs::onclick("my_img",  print("davs"))
}
shinyApp(ui,server)
require(shiny)
require(shinyjs)
ui <- fluidPage(
useShinyjs(),
img(id="smile",src="smile.png",style="cursor:pointer;")
)
server <- function(input, output,session){
shinyjs::onclick("smile",  print("smile"))
}
shinyApp(ui,server)
require(shiny)
require(shinyjs)
ui <- fluidPage(
mainPanel(
useShinyjs(),
img(id="smile",src="smile.png",style="cursor:pointer;")
)
)
server <- function(input, output,session){
shinyjs::onclick("smile",  print("smile"))
}
shinyApp(ui,server)
######################################
## Risk ratio app
######################################
setwd("./")
source("functions/packages.R")
source("ui/ui.R")
source("server/server.R")
shinyApp(ui, server)
